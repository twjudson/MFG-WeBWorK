##DESCRIPTION
##  Algebra problem: Rational exponents--approximating
##ENDDESCRIPTION

##KEYWORDS('algebra', 'root', 'radical', 'exponent')

## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Roots and Radicals)
## Date('1/27/2018')
## Author('Yoshiwara')
## Institution('')
## TitleText1('Modeling, Functions, and Graphs')
## EditionText1('5')
## AuthorText1('Yoshiwara')
## Section1('3.4')
## Problem1('15')

########################################################################
DOCUMENT(); 

loadMacros(
      "PGstandard.pl", # Standard macros for PG language
      "MathObjects.pl",
      "contextLimitedPowers.pl",
      "PGchoicemacros.pl",
"PGML.pl",
#"parserRoot.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());
# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;



###########################
Context("Numeric");
#
#

@denominators = (2, 3, 4, 5, 6);
@ordinals          = ("square", "third", "fourth", "fifth", "sixth");
#@big                  = (9, 6, 5, 4, 3);
#@avoid              = (4, 8, 16, 32, 64);
@fractions         = ("1/2", "1/3", "1/4", "1/5", "1/6");
@slice = NchooseK($#denominators,4);
@n = @denominators[@slice];
@m = @fractions[@slice];
#@R = @big[@slice];
@word = @ordinals[@slice];

#Context()->flags->set(reduceConstants=>0);
Context()->flags->set(limits=>[1,2]);

do { $a[0] = random(2,2**$n[0])+3;} until ($a[0] != 2**$n[0]);
do { $m[0] = random(2,$n[0] +2);} until (gcd($m[0],$n[0]) == 1);
$b[0] = Formula( "$a[0]**{$m[0]/$n[0]} ");
$answer[0] = "$b[0]";
$given[0] = "$a[0]^{$m[0]/$n[0]} ";

do { $a[1] = random(2,2**$n[1])+3;} until ($a[1] != 2**$n[1]);
do { $m[1] = random(2,$n[1] +2);} until (gcd($m[1],$n[1]) == 1);
$temp = random(2,25) * $a[1];
$b[1] = Formula( "$temp**{$m[1]/$n[1]} ");
$answer[1] = $b[1] ;
$given[1] = "\sqrt[$n[1]]{$temp^{$m[1]} }";
if ($n[1]== 2) {$given[1] = "\sqrt{$temp^{$m[1]} }";};


do {$a[2] = random(28,48);} until ($a[2] != 36);
do { $m[2] = random(2,$n[2] -1);} until (gcd($m[2],$n[2]) == 1);
$b[2] = Formula( "$a[2]**{-$m[2]/$n[2]} ");
$answer[2] = $b[2];
$given[2] = "$a[2]^{-$m[2] / $n[2] } ";


$a[3] = random(31,61,2) /10;
$m[3] = random(21,29,2) /10;
$b[3] = Formula( "$a[3]**{$m[3]} ");
$answer[3] = $b[3];
$given[3] = "$a[3]^{$m[3]} ";

Context()->{format}{number} = "%.3f";
Context()->operators->undefine("^","**", "*");
Context()->functions->disable("All");


##############################################################
#


BEGIN_PGML
Use a calculator to approximate each power or root to the nearest thousandth.  
  
a. 
[`[$given[0] ] = `][_______]{ $b[0]->cmp(tolType => 'absolute',
  tolerance => .0005) }  
b. 
[`[$given[1] ] = `][_______]{ $b[1]->cmp(tolType => 'absolute',
  tolerance => .0005) }  
c. 
[`[$given[2] ] = `][_______]{ $b[2]->cmp(tolType => 'absolute',
  tolerance => .0005) }  
d. 
[`[$given[3] ] = `][_______]{ $b[3]->cmp(tolType => 'absolute',
  tolerance => .0005) }  



END_PGML

##############################################################


ENDDOCUMENT();     